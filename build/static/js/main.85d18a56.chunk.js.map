{"version":3,"sources":["utils/API.js","components/Card/Card.js","components/Wrapper/index.js","components/SearchForm/Search.js","components/SortButton/Sort.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeCard","props","Card","style","width","Img","variant","src","image","Body","Title","first","last","Text","email","dob","phone","Wrapper","className","children","SearchForm","Form","onSubmit","formSubmit","Group","as","Row","controlId","Col","Label","Control","onChange","inputChange","Button","type","Sort","onClick","handleSort","App","state","users","search","searchedUsers","handleAgeSort","event","sort","a","b","age","setState","handleInputChange","target","value","handleFormSubmit","preventDefault","console","log","toLowerCase","filterUsers","filter","item","name","includes","API","then","results","data","Search","this","Fragment","map","user","picture","medium","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAEe,EACS,WAChB,OAAOA,IAAMC,IAAI,iD,OCqBVC,MAtBf,SAAsBC,GACd,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,EAAMO,QACnC,kBAACN,EAAA,EAAKO,KAAN,KACA,kBAACP,EAAA,EAAKQ,MAAN,KAAaT,EAAMU,MAAnB,IAA2BV,EAAMW,MAC7B,kBAACV,EAAA,EAAKW,KAAN,eACYZ,EAAMa,OAElB,kBAACZ,EAAA,EAAKW,KAAN,aACUZ,EAAMc,KAEhB,kBAACb,EAAA,EAAKW,KAAN,iBACcZ,EAAMe,U,MCTzBC,MAJf,SAAiBhB,GACf,OAAO,yBAAKiB,UAAU,WAAWjB,EAAMkB,W,8BCmB1BC,MAhBf,SAAoBnB,GAChB,OACI,kBAACoB,EAAA,EAAD,CAAMC,SAAUrB,EAAMsB,YAClB,kBAACF,EAAA,EAAKG,MAAN,CAAYC,GAAIC,IAAKC,UAAU,6BAC3B,kBAACC,EAAA,EAAD,CAAKV,UAAU,qBACX,kBAACG,EAAA,EAAKQ,MAAN,uBACA,kBAACR,EAAA,EAAKS,QAAN,CAAcL,GAAG,QAAQM,SAAU9B,EAAM+B,cACzC,kBAACC,EAAA,EAAD,CAAQf,UAAU,oBAAoBZ,QAAQ,UAAU4B,KAAK,UAA7D,cCHLC,MARf,SAAclC,GACV,OACI,kBAACgC,EAAA,EAAD,CAAQf,UAAU,oBAAoBZ,QAAQ,UAAU4B,KAAK,SAASE,QAASnC,EAAMoC,YAArF,gBCiFOC,E,2MA7EbC,MAAQ,CACNC,MAAO,GACPC,OAAQ,GACRC,cAAe,I,EAYjBC,cAAgB,SAAAC,GACd,IAAIJ,EAAQ,EAAKD,MAAMC,MACvBA,EAAMK,MAAK,SAASC,EAAEC,GACpB,OAAOD,EAAE/B,IAAIiC,IAAID,EAAEhC,IAAIiC,OAEzB,EAAKC,SAAS,CACZP,cAAeF,K,EAInBU,kBAAoB,SAAAN,GAClB,EAAKK,SAAS,CACZR,OAAQG,EAAMO,OAAOC,S,EAIzBC,iBAAmB,SAAAT,GACjBA,EAAMU,iBACNC,QAAQC,IAAI,EAAKjB,MAAME,QACvB,IAAIA,EAAS,EAAKF,MAAME,OAAOgB,cAE3BC,EAAc,EAAKnB,MAAMC,MAAMmB,QAAO,SAAAC,GACxC,OAAOA,EAAKC,KAAKlD,MAAM8C,cAAcK,SAASrB,MAGhD,EAAKQ,SAAS,CACZP,cAAegB,K,mFAnCE,IAAD,OAClBK,IAAyBC,MAAK,SAAAC,GAC5B,EAAKhB,SAAS,CACZT,MAAOyB,EAAQC,KAAKD,QACpBvB,cAAeuB,EAAQC,KAAKD,e,+BAoChC,OACE,6BACE,kBAACE,EAAD,CACE5C,WAAY6C,KAAKf,iBACjBrB,YAAaoC,KAAKlB,oBAEpB,kBAAC,EAAD,CAAMb,WAAY+B,KAAKzB,gBACvB,kBAAC,EAAD,KACE,kBAAC,IAAM0B,SAAP,KACCD,KAAK7B,MAAMG,cAAc4B,KAAI,SAAAC,GAAI,OAChC,kBAAC,EAAD,CACE5D,MAAO4D,EAAKV,KAAKlD,MACjBC,KAAM2D,EAAKV,KAAKjD,KAChBJ,MAAO+D,EAAKC,QAAQC,OACpB1D,IAAKwD,EAAKxD,IAAIiC,IACdhC,MAAOuD,EAAKvD,MACZF,MAAOyD,EAAKzD,kB,GA/DR4D,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.85d18a56.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getRandomEmployees: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=20&nat=us\");\r\n    }\r\n};\r\n\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nfunction EmployeeCard(props) {\r\n        return (\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={props.image} />\r\n                <Card.Body>\r\n                <Card.Title>{props.first} {props.last}</Card.Title>\r\n                    <Card.Text>\r\n                        Email: {props.email}\r\n                </Card.Text>\r\n                    <Card.Text>\r\n                        Age: {props.dob}\r\n                </Card.Text>\r\n                    <Card.Text>\r\n                        Phone #: {props.phone}\r\n                </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n   \r\n    }\r\n\r\n\r\nexport default EmployeeCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nfunction SearchForm(props){\r\n    return(\r\n        <Form onSubmit={props.formSubmit}>\r\n            <Form.Group as={Row} controlId=\"exampleForm.ControlInput1\">\r\n                <Col className=\"col-sm-8 offset-2\">\r\n                    <Form.Label>Search by Name</Form.Label>\r\n                    <Form.Control as=\"input\" onChange={props.inputChange}/>\r\n                    <Button className=\"col-sm-2 offset-5\" variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                    </Button>\r\n                </Col>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nfunction Sort(props){\r\n    return(\r\n        <Button className=\"col-sm-2 offset-5\" variant=\"primary\" type=\"submit\" onClick={props.handleSort}>\r\n        Sort by Age\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default Sort;","import React, { Component } from 'react';\nimport API from \"./utils/API\"\nimport EmployeeCard from './components/Card/Card';\nimport Wrapper from \"../src/components/Wrapper/index\";\nimport SearchForm from \"../src/components/SearchForm/Search\";\nimport Sort from \"../src/components/SortButton/Sort\";\n\n\nclass App extends Component {\n  state = {\n    users: [],\n    search: \"\",\n    searchedUsers: []\n  };\n\n  componentDidMount() {\n    API.getRandomEmployees().then(results => {\n      this.setState({\n        users: results.data.results,\n        searchedUsers: results.data.results\n      });\n    });\n  };\n\n  handleAgeSort = event => {\n    let users = this.state.users;\n    users.sort(function(a,b){\n      return a.dob.age-b.dob.age;\n    })\n    this.setState({\n      searchedUsers: users\n    })\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    console.log(this.state.search);\n    let search = this.state.search.toLowerCase();\n\n    let filterUsers = this.state.users.filter(item => {\n      return item.name.first.toLowerCase().includes(search);\n      \n    })\n    this.setState({\n      searchedUsers: filterUsers\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <SearchForm \n          formSubmit={this.handleFormSubmit}\n          inputChange={this.handleInputChange}\n          />\n        <Sort handleSort={this.handleAgeSort}/>\n        <Wrapper>\n          <React.Fragment>\n          {this.state.searchedUsers.map(user => (\n            <EmployeeCard \n              first={user.name.first}\n              last={user.name.last}\n              image={user.picture.medium}\n              dob={user.dob.age}\n              phone={user.phone}\n              email={user.email}\n            />\n          ))}\n\n          </React.Fragment>\n        </Wrapper>\n      </div>\n    )\n\n    }\n  }\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}